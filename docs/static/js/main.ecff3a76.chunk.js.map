{"version":3,"sources":["components/JSONEditor.js","documentLoader.js","help.js","components/ReceiveCredential.js","components/Theme.js","components/PresentCredential.js","App.js","serviceWorker.js","index.js"],"names":["JSONEditor","this","props","jsonObject","onChange","editorValue","JSON","stringify","mode","theme","readOnly","undefined","style","width","data","name","value","editorProps","$blockScrolling","Component","getJson","url","a","fetch","headers","Accept","method","then","json","startsWith","domain","split","shift","didDocument","contextUrl","document","documentUrl","result","jsonld","documentLoader","res","console","error","Error","Ed25519Signature2018","jsigs","suites","AuthenticationProofPurpose","purposes","key","Ed25519KeyPair","privateKey","id","controller","suite","verificationMethod","getVC","credentialSubjectId","vcjs","issue","credential","vcBindingModel","issuer","credentialSubject","vc","getVP","credentialType","proofPurposeOptions","p","type","holder","sign","compactProof","purpose","vp","getChapiQuery","web","VerifiablePresentation","query","challenge","credentialQuery","reason","example","options","label","ReceiveCredential","panel","React","useState","panel0","panelValues","setPanelValues","state","setState","expanded","expandIcon","aria-controls","flexDirection","select","required","event","target","variant","map","option","marginTop","marginBottom","onClick","WALLET_LOCATION","window","origin","workerUrl","WebCredentialHandler","registration","credentialManager","hints","set","enabledTypes","log","webCredentialWrapper","global","WebCredential","navigator","credentials","store","font1","font2","font3","Theme","children","createMuiTheme","splashImage","palette","primary","light","lighten","main","dark","darken","secondary","typography","useNextVariants","fontSize","fontFamily","join","h1","fontWeight","h2","h3","h4","textTransform","letterSpacing","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","overrides","MuiInput","input","MuiInputLabel","root","MuiAppBar","MuiButton","contained","boxShadow","PresentCredential","ExpansionPanel","ExpansionPanelSummary","ExpansionPanelDetails","TextField","MenuItem","get","App","useEffect","chapi","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","unregister","catch","message"],"mappings":"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","file":"static/js/main.ecff3a76.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport PropTypes from \"prop-types\";\n\n// eslint-disable-next-line\nimport brace from \"brace\";\nimport AceEditor from \"react-ace\";\n\n// eslint-disable-next-line\nimport \"brace/mode/json\";\n// eslint-disable-next-line\nimport \"brace/theme/github\";\n\nclass JSONEditor extends Component {\n\n    render() {\n        const { jsonObject, onChange } = this.props;\n        const editorValue = jsonObject ? JSON.stringify(jsonObject, null, 2) : ''\n        return (\n            <AceEditor\n                mode=\"json\"\n                theme=\"github\"\n                readOnly={onChange === undefined}\n                style={{ ...this.props.style, width: \"100%\" }}\n                onChange={(data) => {\n                    onChange(data);\n                }}\n                name=\"JSONEditorEditor\"\n                value={editorValue}\n                editorProps={{ $blockScrolling: true }}\n            />\n        );\n    }\n}\n\nJSONEditor.propTypes = {\n    jsonObject: PropTypes.object.isRequired,\n    style: PropTypes.object\n};\n\nexport default JSONEditor;\n","import jsonld from 'jsonld';\n\nconst getJson = async url =>\n    fetch(url, {\n        headers: {\n            Accept: 'application/ld+json',\n        },\n        method: 'get',\n    }).then(data => data.json());\n\nexport default async url => {\n    // console.log(url)\n    if (url.startsWith('did:')) {\n        if (url.startsWith('did:web:')) {\n            const domain = url\n                .split('did:web:')[1]\n                .split('#')\n                .shift();\n            const didDocument = await getJson(\n                `https://${domain}/.well-known/did.json`\n            );\n            return {\n                contextUrl: null, // this is for a context via a link header\n                document: didDocument, // this is the actual document that was loaded\n                documentUrl: url, // this is the actual context URL after redirects\n            };\n        }\n        // TODO: use universal resolver when possible\n        const baseUrl = 'https://uniresolver.io/1.0/identifiers/';\n        const result = await getJson(baseUrl + url);\n        const { didDocument } = result;\n        return {\n            contextUrl: null, // this is for a context via a link header\n            document: didDocument, // this is the actual document that was loaded\n            documentUrl: url, // this is the actual context URL after redirects\n        };\n    }\n    try {\n        // console.log('downloading...', url);\n        const res = await jsonld.documentLoader(url);\n        return res;\n    } catch (e) {\n        // eslint-disable-next-line\n        console.error(`No remote context support for ${url}`);\n    }\n    throw new Error(`No custom context support for ${url}`);\n};","\nimport { Ed25519KeyPair } from \"crypto-ld\";\n// import didMethodKey from \"did-method-key\";\nimport vcjs from 'vc-js'\nimport jsigs from 'jsonld-signatures'\nimport documentLoader from './documentLoader'\n\nimport privateKey from './data/privateKey.json'\nimport vcBindingModel from './data/vc.bindingModel.json'\n\nconst { Ed25519Signature2018 } = jsigs.suites;\n// const { keyToDidDoc } = didMethodKey.driver();\n\n\n\nconst { AuthenticationProofPurpose } = jsigs.purposes;\n\nconst key = new Ed25519KeyPair({\n  ...privateKey,\n  id: 'did:web:chapi.did.ai#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN',\n  controller: 'did:web:chapi.did.ai',\n});\n\nconst suite = new Ed25519Signature2018({\n  key: key,\n  verificationMethod: key.id\n});\n\nexport const getVC = async (credentialSubjectId) => {\n  const vc = await vcjs.issue({\n    credential: {\n      ...vcBindingModel,\n      issuer: key.controller,\n      credentialSubject: {\n        ...vcBindingModel.credentialSubject,\n        id: credentialSubjectId\n      }\n    },\n    suite,\n    // documentLoader\n  })\n  return vc;\n}\n\nexport const getVP = async (credentialType, credentialSubjectId, proofPurposeOptions) => {\n\n  if (credentialType === 'DIDAuth') {\n    const p = {\n      '@context': 'https://www.w3.org/2018/credentials/v1',\n      type: 'VerifiablePresentation',\n      holder: credentialSubjectId,\n    }\n    const vp = await jsigs.sign(\n      { ...p },\n      {\n        compactProof: false,\n        documentLoader: documentLoader,\n        purpose: new AuthenticationProofPurpose(proofPurposeOptions),\n        suite\n      }\n    );\n    return vp;\n  }\n\n  const vc = await getVC(credentialSubjectId);\n  const vp = {\n    \"@context\": [\n      \"https://www.w3.org/2018/credentials/v1\",\n      \"https://www.w3.org/2018/credentials/examples/v1\"\n    ],\n    \"type\": \"VerifiablePresentation\",\n    \"verifiableCredential\": [vc]\n  };\n  return vp;\n}\n\nexport const getChapiQuery = (credentialType) => {\n\n  switch (credentialType) {\n    case 'DIDAuth': return {\n      web: {\n        VerifiablePresentation: {\n          query: {\n            type: 'DIDAuth'\n          },\n          // a 128-bit randomly generated value encoded as a string (use a UUID);\n          // it will be digitally signed in the authentication proof\n          // that will be attached to the VerifiablePresentation response\n          challenge: '99612b24-63d9-11ea-b99f-4f66f3e4f81a',\n          // the domain that must be digitally signed in the authentication\n          // proof that will be attached to the VerifiablePresentation\n          // response, identifying the recipient\n          domain: 'issuer.example.com'\n        }\n      }\n    };\n    default: return {\n      web: {\n        VerifiablePresentation: {\n          query: [\n            {\n              type: 'QueryByExample',\n              credentialQuery: {\n                reason: `Please present an ${credentialType} for JaneDoe.`,\n                example: {\n                  '@context': [\n                    'https://www.w3.org/2018/credentials/v1',\n                    'https://www.w3.org/2018/credentials/examples/v1',\n                  ],\n                  type: [credentialType],\n                },\n              },\n            },\n          ],\n        },\n      },\n    }\n  }\n\n}","import React from 'react';\nimport * as WebCredentialHandler from 'web-credential-handler';\n\nimport Typography from '@material-ui/core/Typography/Typography'\nimport Button from '@material-ui/core/Button/Button'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport TextField from '@material-ui/core/TextField/TextField'\n\nimport { getVP } from '../help';\n\nimport JSONEditor from './JSONEditor'\n\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\n\nconst options = [\n  {\n    value: 'UniversityDegreeCredential',\n    label: 'UniversityDegreeCredential',\n  },\n  {\n    value: 'DIDAuth',\n    label: 'DIDAuth',\n  },\n\n];\n\nfunction ReceiveCredential() {\n\n  const [panelValues, setPanelValues] = React.useState({\n    panel0: true,\n  });\n\n  const [state, setState] = React.useState({\n    credentialSubjectId: 'did:example:credential-subject-123',\n    credentialType: 'UniversityDegreeCredential'\n  });\n\n\n  const handleChange = event => {\n    setState({ ...state, credentialType: event.target.value });\n  };\n\n  const handleChangePanels = panel => () => {\n    setPanelValues({\n      ...panelValues,\n      // eslint-disable-next-line\n      [panel]: !panelValues[panel],\n    });\n  };\n\n\n  return (\n    <ExpansionPanel\n      // eslint-disable-next-line\n      expanded={panelValues['panel0']}\n      onChange={handleChangePanels('panel0')}\n    >\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls={`panel0-content`}\n        id={`panel0-header`}\n      >\n        <Typography>Receive Credential from Website</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails style={{ flexDirection: 'column' }} >\n\n        <TextField\n          id=\"outlined-select-credentialType\"\n          select\n          required\n          label=\"Credential Type\"\n          style={{ \"marginBottom\": '16px' }}\n          value={state.credentialType}\n          onChange={handleChange}\n          variant=\"outlined\"\n        >\n          {options.map(option => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          required\n          id=\"credentialSubjectId\"\n          label=\"Credential Subject ID\"\n          variant=\"outlined\"\n          value={state.credentialSubjectId}\n        />\n        <div style={{ marginTop: '16px', marginBottom: '16px' }}>\n          <Button variant={'contained'} onClick={async () => {\n            // CORS issue\n            // const issuerEndpoint = 'https://issuer-verifier-vc-api.transmute.world/issuer/credential';\n            // const vp = await getVP(state.credentialSubjectId);\n            // // console.log()\n            // let payload = { ...vp.verifiableCredential[0] }\n            // delete payload.proof;\n            // const response = await fetch(issuerEndpoint, {\n            //   method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            //   mode: 'cors', // no-cors, *cors, same-origin\n            //   cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            //   // credentials: 'same-origin', // include, *same-origin, omit\n            //   headers: {\n            //     'Content-Type': 'application/json'\n            //     // 'Content-Type': 'application/x-www-form-urlencoded',\n            //   },\n            //   redirect: 'follow', // manual, *follow, error\n            //   referrerPolicy: 'no-referrer', // no-referrer, *client\n            //   body: JSON.stringify(payload) // body data type must match \"Content-Type\" header\n            // });\n            // await response.json();\n            const WALLET_LOCATION = window.origin;\n            const workerUrl = `${WALLET_LOCATION}/worker.html`;\n            const registration = await WebCredentialHandler.installHandler({ url: workerUrl });\n            await registration.credentialManager.hints.set(\n              'test', {\n              name: 'TestUser',\n              enabledTypes: ['VerifiablePresentation', 'VerifiableCredential', 'UniversityDegreeCredential']\n              // enabledTypes: ['VerifiablePresentation']\n            });\n            console.log('Wallet registered.');\n\n            let proofPurposeOptions = {};\n            if (state.credentialType === 'DIDAuth') {\n              proofPurposeOptions = {\n                domain: 'issuer.example.com',\n                challenge: '99612b24-63d9-11ea-b99f-4f66f3e4f81a',\n              }\n            }\n\n            // Normally get from authenticated network request...\n            const vp = await getVP(state.credentialType, state.credentialSubjectId, proofPurposeOptions);\n            const webCredentialWrapper = new global.WebCredential(vp.type, vp);\n            // Use Credential Handler API to store\n            const result = await navigator.credentials.store(webCredentialWrapper);\n            console.log('Result of receiving via store() request:', result);\n            setState({\n              ...state,\n              vp\n            })\n          }}>Receive Credential</Button>\n        </div>\n\n        {state.vp && <JSONEditor jsonObject={state.vp} />}\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n\nexport default ReceiveCredential;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nimport { darken, lighten } from '@material-ui/core/styles/colorManipulator';\n\nconst primaryColor = '#594aa8';\nconst secondaryColor = '#fcb373';\n\nconst font1 = '\"Rajdhani\"';\nconst font2 = '\"Roboto Condensed\"';\nconst font3 = '\"Lato\"';\n\nconst fontWeightLight = 300;\nconst fontWeightRegular = 400;\nconst fontWeightMedium = 600;\n\nclass Theme extends Component {\n    render() {\n        const { children } = this.props;\n        const theme = createMuiTheme({\n            splashImage: '',\n            palette: {\n                type: 'light',\n                primary: {\n                    light: lighten(primaryColor, 0.07),\n                    main: primaryColor,\n                    dark: darken(primaryColor, 0.07),\n                },\n                secondary: {\n                    light: lighten(secondaryColor, 0.07),\n                    main: secondaryColor,\n                    dark: darken(secondaryColor, 0.07),\n                },\n            },\n            typography: {\n                useNextVariants: true,\n                fontSize: 16,\n                fontFamily: [font1, font2, font3].join(','),\n                h1: {\n                    fontFamily: font1,\n                    fontWeight: fontWeightMedium,\n                },\n                h2: {\n                    fontFamily: font1,\n                    fontWeight: fontWeightMedium,\n                },\n                h3: {\n                    fontFamily: font1,\n                    fontWeight: fontWeightMedium,\n                },\n                h4: {\n                    fontFamily: font2,\n                    textTransform: 'uppercase',\n                    letterSpacing: '0.1em',\n                    fontWeight: fontWeightRegular,\n                },\n                h5: {\n                    fontFamily: font2,\n                    textTransform: 'uppercase',\n                    letterSpacing: '0.1em',\n                    fontWeight: fontWeightRegular,\n                },\n                h6: {\n                    fontFamily: font2,\n                    textTransform: 'uppercase',\n                    letterSpacing: '0.1em',\n                    fontWeight: fontWeightRegular,\n                },\n                subtitle1: {\n                    fontFamily: font1,\n                    fontWeight: fontWeightRegular,\n                },\n                subtitle2: {\n                    fontFamily: font2,\n                    fontWeight: fontWeightRegular,\n                },\n                body1: {\n                    fontFamily: font3,\n                    fontWeight: fontWeightRegular,\n                },\n                body2: {\n                    fontFamily: font3,\n                    fontWeight: fontWeightRegular,\n                },\n                button: {\n                    fontFamily: font2,\n                    fontWeight: fontWeightRegular,\n                },\n                caption: {\n                    fontFamily: font2,\n                    fontWeight: fontWeightRegular,\n                },\n                overline: {\n                    fontFamily: font2,\n                    letterSpacing: '0.15em',\n                    textTransform: 'uppercase',\n                    fontWeight: fontWeightLight,\n                },\n            },\n\n            overrides: {\n                MuiInput: {\n                    // Name of the component ⚛️ / style sheet\n                    input: {\n                        fontFamily: font3,\n                    },\n                },\n                MuiInputLabel: {\n                    // Name of the component ⚛️ / style sheet\n                    root: {\n                        fontFamily: font2,\n                    },\n                },\n                MuiAppBar: {\n                    root: {\n                        // boxShadow: 'none',\n                    },\n                },\n                MuiButton: {\n                    // Name of the rule\n                    contained: {\n                        boxShadow: 'none',\n                    },\n                },\n            },\n        });\n        return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>;\n    }\n}\n\nTheme.propTypes = {\n    children: PropTypes.any.isRequired,\n};\n\nexport default Theme;","import React from 'react';\n\nimport Typography from '@material-ui/core/Typography/Typography'\nimport Button from '@material-ui/core/Button/Button'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport TextField from '@material-ui/core/TextField'\n\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport JSONEditor from './JSONEditor'\n\nimport { getChapiQuery } from '../help';\n\nconst options = [\n  {\n    value: 'UniversityDegreeCredential',\n    label: 'UniversityDegreeCredential',\n  },\n  {\n    value: 'DIDAuth',\n    label: 'DIDAuth',\n  },\n\n];\n\nfunction PresentCredential() {\n\n  const [panelValues, setPanelValues] = React.useState({\n    panel0: true,\n  });\n\n  const [state, setState] = React.useState({\n    credentialSubjectId: 'did:example:credential-subject-123',\n    credentialType: 'UniversityDegreeCredential'\n  });\n\n\n  const handleChange = event => {\n    setState({ ...state, credentialType: event.target.value });\n  };\n\n  const handleChangePanels = panel => () => {\n    setPanelValues({\n      ...panelValues,\n      // eslint-disable-next-line\n      [panel]: !panelValues[panel],\n    });\n  };\n\n  return (\n    <ExpansionPanel\n      // eslint-disable-next-line\n      expanded={panelValues['panel0']}\n      onChange={handleChangePanels('panel0')}\n    >\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls={`panel0-content`}\n        id={`panel0-header`}\n      >\n        <Typography>Present Credential to Website</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails style={{ flexDirection: 'column' }} >\n        <TextField\n          id=\"outlined-select-credentialType\"\n          select\n          required\n          label=\"Credential Type\"\n          value={state.credentialType}\n          onChange={handleChange}\n          variant=\"outlined\"\n        >\n          {options.map(option => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <div style={{ marginTop: '16px', marginBottom: '16px' }}>\n          <Button variant={'contained'} onClick={async () => {\n            const query = getChapiQuery(state.credentialType);\n            const result = await navigator.credentials.get(query);\n            // normally submit credential to http endpoint.. display for demo...\n            setState({\n              ...state,\n              vp: result.data\n            })\n          }}>Present Credential</Button>\n        </div>\n\n        {state.vp && <JSONEditor jsonObject={state.vp} />}\n\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n\nexport default PresentCredential;\n","import React from 'react';\nimport * as chapi from 'credential-handler-polyfill';\n\nimport Typography from '@material-ui/core/Typography/Typography'\n\nimport Theme from './components/Theme'\nimport './App.css';\n\nimport ReceiveCredential from './components/ReceiveCredential'\nimport PresentCredential from './components/PresentCredential'\n\nfunction App() {\n\n  React.useEffect(() => {\n    (async () => {\n      try {\n        await chapi.loadOnce();\n      } catch (e) {\n        console.error('Error in loadOnce:', e);\n      }\n    })();\n  })\n  return (\n    <Theme>\n      <div className=\"App\">\n        <Typography variant=\"h3\">CHAPI DEMO</Typography>\n        <ReceiveCredential />\n        <PresentCredential />\n      </div>\n    </Theme>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}