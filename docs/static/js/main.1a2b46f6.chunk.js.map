{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["testCredential","credentialQuery","web","VerifiablePresentation","query","type","reason","example","credentialSubject","id","App","React","useState","state","setState","useEffect","a","chapi","console","error","className","onClick","WALLET_LOCATION","window","origin","workerUrl","WebCredentialHandler","url","registration","credentialManager","hints","set","name","enabledTypes","log","webCredentialWrapper","global","WebCredential","navigator","credentials","store","result","get","vp","data","JSON","stringify","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","unregister","catch","message"],"mappings":"uNAMMA,G,MAAiB,CACrB,WAAY,CACV,yCACA,mDAEF,KAAQ,yBACR,qBAAwB,CAAC,CACvB,WAAY,CACV,yCACA,mDAEF,GAAM,sCACN,KAAQ,CAAC,uBAAwB,oBACjC,OAAU,qCACV,aAAgB,uBAChB,kBAAqB,CACnB,GAAM,0CACN,SAAY,CACV,GAAM,0CACN,KAAQ,CACN,MAAS,qBACT,KAAQ,QAId,MAAS,CACP,KAAQ,mBACR,QAAW,uBACX,aAAgB,kBAChB,mBAAsB,qCACtB,IAAO,6OAKPC,EAAkB,CACtBC,IAAK,CACHC,uBAAwB,CACtBC,MAAO,CACL,CACEC,KAAM,iBACNJ,gBAAiB,CACfK,OAAQ,kDACRC,QAAS,CACP,WAAY,CACV,yCACA,mDAEFF,KAAM,CAAC,0BACPG,kBAAmB,CACjBC,GAAI,kDAgELC,IAtDf,WAAgB,IAAD,EAEaC,IAAMC,SAAS,IAF5B,mBAENC,EAFM,KAECC,EAFD,KAeb,OATAH,IAAMI,WAAU,WACd,sBAAC,sBAAAC,EAAA,+EAESC,MAFT,sDAIGC,QAAQC,MAAM,qBAAd,MAJH,uDAAD,MASA,yBAAKC,UAAU,OACb,sDACA,6BACE,4BAAQC,QAAO,sBAAE,oCAAAL,EAAA,6DACTM,EAAkBC,OAAOC,OACzBC,EAFS,UAEMH,EAFN,yBAGYI,IAAoC,CAACC,IAAKF,IAHtD,cAGTG,EAHS,gBAITA,EAAaC,kBAAkBC,MAAMC,IACzC,OAAQ,CACNC,KAAM,WACNC,aAAc,CAAC,yBAA0B,uBAAwB,sBAPtD,cAUff,QAAQgB,IAAI,sBACNC,EAAuB,IAAIC,EAAOC,cAAcrC,EAAeK,KAAML,GAX5D,UAaMsC,UAAUC,YAAYC,MAAML,GAblC,QAaTM,EAbS,OAcfvB,QAAQgB,IAAI,2CAA4CO,GAdzC,6CAAjB,oCAkBF,6BACE,4BAAQpB,QAAO,sBAAE,4BAAAL,EAAA,sEACOsB,UAAUC,YAAYG,IAAIzC,GADjC,OACRwC,EADQ,OAEdvB,QAAQgB,IAAIO,GACZ3B,EAAS,CACP6B,GAAIF,EAAOG,OAJC,4CAAjB,kCASF,6BACE,6BAAMC,KAAKC,UAAUjC,EAAO,KAAM,S,4LCtGtBkC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC1C,EAAA,EAAD,MAAS2C,SAASC,eAAe,SD6H3C,kBAAmBhB,WACrBA,UAAUiB,cAAcC,MACrBC,MAAK,SAAA7B,GACJA,EAAa8B,gBAEdC,OAAM,SAAAxC,GACLD,QAAQC,MAAMA,EAAMyC,c","file":"static/js/main.1a2b46f6.chunk.js","sourcesContent":["import React from 'react';\nimport * as chapi from 'credential-handler-polyfill';\nimport * as WebCredentialHandler from 'web-credential-handler';\n\nimport './App.css';\n\nconst testCredential = {\n  \"@context\": [\n    \"https://www.w3.org/2018/credentials/v1\",\n    \"https://www.w3.org/2018/credentials/examples/v1\"\n  ],\n  \"type\": \"VerifiablePresentation\",\n  \"verifiableCredential\": [{\n    \"@context\": [\n      \"https://www.w3.org/2018/credentials/v1\",\n      \"https://www.w3.org/2018/credentials/examples/v1\"\n    ],\n    \"id\": \"http://example.edu/credentials/1872\",\n    \"type\": [\"VerifiableCredential\", \"AlumniCredential\"],\n    \"issuer\": \"https://example.edu/issuers/565049\",\n    \"issuanceDate\": \"2010-01-01T19:73:24Z\",\n    \"credentialSubject\": {\n      \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n      \"alumniOf\": {\n        \"id\": \"did:example:c276e12ec21ebfeb1f712ebc6f1\",\n        \"name\": {\n          \"value\": \"Example University\",\n          \"lang\": \"en\"\n        }\n      }\n    },\n    \"proof\": {\n      \"type\": \"RsaSignature2018\",\n      \"created\": \"2017-06-18T21:19:10Z\",\n      \"proofPurpose\": \"assertionMethod\",\n      \"verificationMethod\": \"https://example.edu/issuers/keys/1\",\n      \"jws\": \"eyJhbGciOiJSUzI1NiIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TCYt5XsITJX1CxPCT8yAV-TVkIEq_PbChOMqsLfRoPsnsgw5WEuts01mq-pQy7UJiN5mgRxD-WUcX16dUEMGlv50aqzpqh4Qktb3rk-BuQy72IFLOqV0G_zS245-kronKb78cPN25DGlcTwLtjPAYuNzVBAh4vGHSrQyHUdBBPM\"\n    }\n  }]\n};\n\nconst credentialQuery = {\n  web: {\n    VerifiablePresentation: {\n      query: [\n        {\n          type: 'QueryByExample',\n          credentialQuery: {\n            reason: 'Please present an AlumniCredential for JaneDoe.',\n            example: {\n              '@context': [\n                'https://www.w3.org/2018/credentials/v1',\n                'https://www.w3.org/2018/credentials/examples/v1',\n              ],\n              type: ['VerifiablePresentation'],\n              credentialSubject: {\n                id: 'did:example:ebfeb1f712ebc6f1c276e12ec21',\n              },\n            },\n          },\n        },\n      ],\n    },\n  },\n};\n\nfunction App() {\n\n  const [state, setState] = React.useState({\n\n  })\n\n  React.useEffect(()=>{\n    (async ()=>{\n      try {\n        await chapi.loadOnce();\n      } catch(e) {\n        console.error('Error in loadOnce:', e);\n      }\n    })();\n  })\n  return (\n    <div className=\"App\">\n      <h3>CHAPI CREATE REACT APP</h3>\n      <div>\n        <button onClick={async ()=>{\n          const WALLET_LOCATION = window.origin;\n          const workerUrl = `${WALLET_LOCATION}/worker.html`;\n          const registration = await WebCredentialHandler.installHandler({url: workerUrl});\n          await registration.credentialManager.hints.set(\n            'test', {\n              name: 'TestUser',\n              enabledTypes: ['VerifiablePresentation', 'VerifiableCredential', 'AlumniCredential']\n              // enabledTypes: ['VerifiablePresentation']\n            });\n          console.log('Wallet registered.');\n          const webCredentialWrapper = new global.WebCredential(testCredential.type, testCredential);\n          // Use Credential Handler API to store\n          const result = await navigator.credentials.store(webCredentialWrapper);\n          console.log('Result of receiving via store() request:', result);\n        }}>Receive Credential From Website</button>\n      </div>\n\n      <div>\n        <button onClick={async ()=>{\n           const result = await navigator.credentials.get(credentialQuery);\n           console.log(result);\n           setState({\n             vp: result.data\n           })\n        }}>Share Credential With Website</button>\n      </div>\n\n      <div>\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}